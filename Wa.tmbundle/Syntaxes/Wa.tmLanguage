<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>Wa language</string>
	<key>fileTypes</key>
	<array>
		<string>wa</string>
	</array>
	<key>firstLineMatch</key>
	<string>(?i)-[*]-\s*(mode:)?\s*wa\s*-[*]-</string>
	<key>keyEquivalent</key>
	<string>^~G</string>
	<key>name</key>
	<string>Wa</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#receiver_function_declaration</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#plain_function_declaration</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#type_declaration</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#basic_things</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#exported_variables</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*(import)\b\s+</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.wa</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(?:#|/\*))|$</string>
			<key>name</key>
			<string>meta.preprocessor.wa.import</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.wa</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.wa</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.import.wa</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>include</key>
			<string>#block</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#root_parens</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#function_calls</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>access</key>
		<dict>
			<key>match</key>
			<string>(?&lt;=\.)[[:alpha:]_]\w*\b(?!\s*\()</string>
			<key>name</key>
			<string>variable.other.dot-access.wa</string>
		</dict>
		<key>basic_things</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#initializers</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#access</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#strings</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keywords</string>
				</dict>
			</array>
		</dict>
		<key>block</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.block.begin.wa</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.block.end.wa</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.block.wa</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#block_innards</string>
				</dict>
			</array>
		</dict>
		<key>block_innards</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function_block_innards</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#exported_variables</string>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.toc-list.banner.block.wa</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^/\* =(\s*.*?)\s*= \*/$\n?</string>
					<key>name</key>
					<string>comment.block.wa</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.wa</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.wa</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\*/.*\n</string>
					<key>name</key>
					<string>invalid.illegal.stray-comment-end.wa</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.wa</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.toc-list.banner.line.wa</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^(#) =(\s*.*?)\s*=\s*$\n?</string>
					<key>name</key>
					<string>comment.line.double-slash.banner.wa</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(^[ \t]+)?(?=#)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.comment.leading.wa</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?!\G)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>#</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.wa</string>
								</dict>
							</dict>
							<key>end</key>
							<string>\n</string>
							<key>name</key>
							<string>comment.line.double-slash.wa</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>(?&gt;\\\s*\n)</string>
									<key>name</key>
									<string>punctuation.separator.continuation.wa</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>exported_variables</key>
		<dict>
			<key>comment</key>
			<string>This is kinda hacky, in order to get the 'var' scoped the right way again.</string>
			<key>match</key>
			<string>(?&lt;=\s|\[\])([[:upper:]]\w*)(?=\W+)</string>
			<key>name</key>
			<string>variable.other.exported.wa</string>
		</dict>
		<key>fn_parens</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.parens.begin.wa</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.parens.end.wa</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.parens.wa</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#basic_things</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function_calls</string>
				</dict>
			</array>
		</dict>
		<key>function_block</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.function-block.begin.wa</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.function-block.end.wa</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.block.wa</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function_block_innards</string>
				</dict>
			</array>
		</dict>
		<key>function_block_innards</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#basic_things</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.wa</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.builtin.wa</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\s*)\b(new|c(lose|ap)|p(anic|rint(ln)?)|len|make|append)(?:\b|\()</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function_block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function_calls</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#fn_parens</string>
				</dict>
			</array>
		</dict>
		<key>function_calls</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.whitespace.function-call.leading.wa</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.function.any-method.wa</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.wa</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x)
			    (?: (?= \s ) (?:(?&lt;=else|new|return) | (?&lt;!\w)) (\s+) )?
			    (\b
			        (?!(for|if|else|switch|return)\s*\()
			        (?:[[:alpha:]_]\w*+\b)            # method name
			    )
			    \s*(\()
			</string>
			<key>name</key>
			<string>meta.function-call.wa</string>
		</dict>
		<key>initializers</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.wa</string>
						</dict>
						<key>2</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>[[:alpha:]_]\w*</string>
									<key>name</key>
									<string>variable.other.wa</string>
								</dict>
							</array>
						</dict>
						<key>3</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#keywords</string>
								</dict>
								<dict>
									<key>match</key>
									<string>[[:alpha:]_]\w*\b(?!\.)</string>
									<key>name</key>
									<string>support.type.wa</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>comment</key>
					<string>This matches the 'var x' style of variable declaration.</string>
					<key>match</key>
					<string>^\s*(var)\s+((?:[[:alpha:]_]\w*)(?:,\s+[[:alpha:]_]\w*)*)\s*(.*?)\s*(?:=|$)</string>
					<key>name</key>
					<string>meta.initialization.explicit.wa</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>[[:alpha:]_]\w*</string>
									<key>name</key>
									<string>variable.other.wa</string>
								</dict>
							</array>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.wa</string>
						</dict>
						<key>3</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#keywords</string>
								</dict>
								<dict>
									<key>match</key>
									<string>[[:alpha:]_]\w*\b(?!\.)</string>
									<key>name</key>
									<string>support.type.wa</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>comment</key>
					<string>This matches the 'x :=' style of variable declaration.</string>
					<key>match</key>
					<string>((?:[[:alpha:]_]\w*)(?:\s*,\s+[[:alpha:]_]\w*)*)\s*(:=)(?:\s*([[:alpha:]_]\w*)\s*\{)?</string>
					<key>name</key>
					<string>meta.initialization.short.wa</string>
				</dict>
			</array>
		</dict>
		<key>keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(switch|c(ontinue|ase)|type|i(nterface|f|mport)|def(er|ault)|package|else|var|f(or|n)|r(eturn|ange)|break)\b</string>
					<key>name</key>
					<string>keyword.control.wa</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\b|(?&lt;=\]))(int(16|8|32|64)?|i(16|8|32|64)?|uint(16|8|32|64|ptr)?|u(16|8|32|64|ptr)?|rune|float(32|64)|f(32|64)|complex(64|128)|b(yte|ool)|string|error|struct)\b</string>
					<key>name</key>
					<string>storage.type.wa</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(c(onst|han)|map)\b</string>
					<key>name</key>
					<string>storage.modifier.wa</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(nil|true|false|iota)\b</string>
					<key>name</key>
					<string>constant.language.wa</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((0(x|X)[0-9a-fA-F]*)|((\d+\.?\d*)|(\.\d+))((e|E)(\+|-)?\d+)?)\b</string>
					<key>name</key>
					<string>constant.numeric.wa</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\&lt;\-</string>
					<key>name</key>
					<string>keyword.operator.channel.wa</string>
				</dict>
			</array>
		</dict>
		<key>plain_function_declaration</key>
		<dict>
			<key>begin</key>
			<string>(?x)
			        (^\s*(fn)\s*
			         ([[:alpha:]_]\w*)?                                            # name of function is optional
			         \( ((?:[\[\]\w\d\s\/,._*&amp;&lt;&gt;-]|(?:interface\{\}))*)? \)        # required braces for parameters (even if empty)
			         \s*
			         (?:                                                           # optional return types
			          (?: \( ((?:[\[\]\w\d\s,._*&amp;&lt;&gt;-]|(?:interface\{\}))*) \) ) |  # within braces
			          (?: ((?:[\[\]\w\d\s,._*&amp;&lt;&gt;-]|(?:interface\{\}))*) )          # without braces (just type)
			         )?
			        )
			</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.function.declaration.wa</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.wa</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.wa</string>
				</dict>
				<key>4</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.parameter.wa</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(?&lt;=[\(,])\s*([[:alpha:]_]\w*)</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#keywords</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[[:alpha:]_]\w*\b(?!\.)</string>
							<key>name</key>
							<string>support.type.parameter.wa</string>
						</dict>
					</array>
				</dict>
				<key>5</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.parameter.return.wa</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(?&lt;=[\(,])\s*([[:alpha:]_]\w*)</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#keywords</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[[:alpha:]_]\w*\b(?!\.)</string>
							<key>name</key>
							<string>support.type.return.wa</string>
						</dict>
					</array>
				</dict>
				<key>6</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#keywords</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[[:alpha:]_]\w*\b(?!\.)</string>
							<key>name</key>
							<string>support.type.return.wa</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>comment</key>
			<string>We scope all parenthesized alpha-numeric text as variable.parameter.wa and storage.type.return.wa, which is a bit lazy, as some of it is storage.type.</string>
			<key>end</key>
			<string>(?&lt;=\})</string>
			<key>name</key>
			<string>meta.function.plain.wa</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function_block</string>
				</dict>
			</array>
		</dict>
		<key>receiver_function_declaration</key>
		<dict>
			<key>begin</key>
			<string>(?x)
			        (
			         (fn)\s*
			         (
			         \( ((?:[\[\]\w\d\s,._*&amp;&lt;&gt;-]|(?:interface\{\}))*) \)\s+        # receiver variable declarations, in brackets
			         ([[:alpha:]_]\w*)?                                            # name of function is optional
			         )
			         \( ((?:[\[\]\w\d\s,._*&amp;&lt;&gt;-]|(?:interface\{\}))*)? \)          # required braces for parameters (even if empty)
			         \s*
			         (?:                                                           # optional return types
			          (?: \( ((?:[\[\]\w\d\s,._*&amp;&lt;&gt;-]|(?:interface\{\}))*) \) ) |  # within braces
			          (?: ((?:[\[\]\w\d\s,._*&amp;&lt;&gt;-]|(?:interface\{\}))*) )          # without braces (just type)
			         )?
			        )
			</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.function.receiver.declaration.wa</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.wa</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.full-name.wa</string>
				</dict>
				<key>4</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.other.receiver.wa</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(?&lt;=[\(,])\s*([[:alpha:]_]\w*)</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#keywords</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[[:alpha:]_]\w*</string>
							<key>name</key>
							<string>support.type.receiver.wa</string>
						</dict>
					</array>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.wa</string>
				</dict>
				<key>6</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.parameter.wa</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(?&lt;=[\(,])\s*([[:alpha:]_]\w*)</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#keywords</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[[:alpha:]_]\w*\b(?!\.)</string>
							<key>name</key>
							<string>support.type.parameter.wa</string>
						</dict>
					</array>
				</dict>
				<key>7</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.parameter.return.wa</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(?&lt;=[\(,])\s*([[:alpha:]_]\w*)</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#keywords</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[[:alpha:]_]\w*\b(?!\.)</string>
							<key>name</key>
							<string>support.type.return.wa</string>
						</dict>
					</array>
				</dict>
				<key>8</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#keywords</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[[:alpha:]_]\w*\b(?!\.)</string>
							<key>name</key>
							<string>support.type.return.wa</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>comment</key>
			<string>Version of above with support for declaring a receiver variable.</string>
			<key>end</key>
			<string>(?&lt;=\})</string>
			<key>name</key>
			<string>meta.function.receiver.wa</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function_block</string>
				</dict>
			</array>
		</dict>
		<key>root_parens</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>(?&lt;=\()(\))?|(?:\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.parens.empty.wa</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.parens.wa</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#basic_things</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#exported_variables</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function_calls</string>
				</dict>
			</array>
		</dict>
		<key>string_escaped_char</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(\\|[abfnrutv'"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}|[0-7]{3})</string>
					<key>name</key>
					<string>constant.character.escape.wa</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>invalid.illegal.unknown-escape.wa</string>
				</dict>
			</array>
		</dict>
		<key>string_placeholder</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x)%
					    (\d+\$)?                                 # field (argument #)
					    [#0\- +']*                              # flags
					    [,;:_]?                                  # separator character (AltiVec)
					    ((-?\d+)|\*(-?\d+\$)?)?                  # minimum field width
					    (\.((-?\d+)|\*(-?\d+\$)?)?)?             # precision
					    (\[\d+\])?                               # argument index
					    [diouxXDOUeEfFgGaAcCsSpnvtTbyYhHmMzZq%]  # conversion type
					</string>
					<key>name</key>
					<string>constant.other.placeholder.wa</string>
				</dict>
				<dict>
					<key>match</key>
					<string>%</string>
					<key>name</key>
					<string>invalid.illegal.placeholder.wa</string>
				</dict>
			</array>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.wa</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.wa</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.wa</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_placeholder</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#string_escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.wa</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.wa</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.wa</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>`</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.wa</string>
						</dict>
					</dict>
					<key>end</key>
					<string>`</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.wa</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.other.raw.wa</string>
				</dict>
			</array>
		</dict>
		<key>type_declaration</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.wa</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.exported.wa</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.private.wa</string>
				</dict>
				<key>4</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#keywords</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[[:alpha:]_]\w*\b(?!\.)</string>
							<key>name</key>
							<string>support.type.wa</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x)
			         ^\s*(type)\s*
			          (?:([[:upper:]]\w*)|([[:alpha:]_]\w*))           # name of type
			          ((?:[\[\]\w\d\s\/,._*&amp;&lt;&gt;-]|(?:interface\{\}))*)? # other type
			</string>
			<key>name</key>
			<string>meta.type.wa</string>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.wa</string>
	<key>uuid</key>
	<string>33100200-8916-4F78-8522-5A5A5A5A5A5A</string>
</dict>
</plist>
